
import json
import pandas as pd
import torch

from langchain_community.vectorstores import FAISS
from langchain_huggingface import HuggingFaceEmbeddings

from functions.agent_functions import Agent
from functions.report_agent_functions import agent_chat, construct_radiologist_prompt
from functions.rag_functions import create_vectorstore_report
from functions.evaluation_functions import evaluation_three_models

llm_llama3 = "llama3:70b"
vectorstore_directory = "/path/to/your/vectorstore_directory"  # Replace with the actual directory path

embedding_model = HuggingFaceEmbeddings(
  model_name = "Alibaba-NLP/gte-large-en-v1.5",  
  model_kwargs={"trust_remote_code":True}, #"device": "cpu",
  encode_kwargs={"normalize_embeddings": True}
)

chat_signal = {"continue": "REVISION: YES","terminate":"REVISION: NO"}

### Agent definition
radiologist = Agent(
    role="radiologist", 
    llm=llm_llama3,
    sys_message= """You are a thoracic radiologist. Based on the given 'FINDINGS' section of the chest image report,\
    your task is to derive the 'IMPRESSION' section which contains summarization of the clinically significant findings and possible diagnostic interpretations.\
    If reviewers' feedback is provided, consider it as an additional context to revise your impression.\
    Ensure that your derived 'IMPRESSION' is clear, concise, accurate.\
    Start your response directly with 'IMPRESSION:' followed by your impression, without any preamble or additional comments or notes.
    """
    )

reviewer = Agent(
    role="Reviewer", 
    llm=llm_llama3,
    sys_message = f"""You are a reviewer for the 'IMPRESSION' section in chest image reports.\
    Your task is to verify whether each finding mentioned in the 'IMPRESSION' section is consistent with the 'FINDINGS' section.\
    Specifically, focus on the details regarding size, location, severity, and progression status of the findings.
    If you identify any inconsistent descriptions in the 'IMPRESSION', end your response with '{chat_signal['continue']}'.
    If all findings mentioned in the 'IMPRESSION' are consistent, end your response with '{chat_signal['terminate']}'.
    """
    )

# non-LLM agent
Retriever = Agent(
    role = "Retriever",
    tool ="retrieve_report"
    )


########################################################################################################################## 
# Placeholder paths - Replace these with actual paths before running the script
task_file = "./path/to/input_file"  # Task input file path
file_name = "./path/to/output_file_name"  # Base file name for output files
# Output file paths
output_file = f"{file_name}.json" 
output_xlsx = f"{file_name}.xlsx" 

### A list of reviewers, allowing for multiple reviewers to be included.
# The next reviewer will chat with the radiologist when the last reviewer responds with {chat_signal['terminate']}.
reviewer_list = [reviewer]  
reviewer_number = len(reviewer_list)
    
max_round = 3  # maxium round of chat between radiologist and reviewer
rag_k = 10 # number of similiar report retrieved by retriever

column_name = ['ID','ACC','modality','ProcedureNM','FINDINGS','IMPRESSION_CLEAN']
with pd.ExcelFile(task_file) as xls:
    alldata_df = pd.read_excel(xls,usecols = column_name,sheet_name=0) # 

alldata_df=alldata_df.loc[alldata_df['modality']=='XR'].copy().reset_index(drop=True)

### select data for evaluation
data_index=range(0,2000,10)
data_df = alldata_df.loc[data_index,:].copy().reset_index(drop=True)  

data_df = data_df.loc[0:20,:].copy()

### creat new vector database 
### the rest data are used to creat the vector database
# database_df= alldata_df.drop(data_index, errors='ignore').copy().reset_index(drop=True)
# vectorstore = create_vectorstore_report(embedding_model,vectorstore_directory,database_df)

### load an existing vector database
vectorstore = FAISS.load_local(vectorstore_directory, embedding_model, allow_dangerous_deserialization=True)

data_df[['IMPRESSION_original','rag10','IMPRESSION_rag', 'IMPRESSION_agent','round']] = None

generated_description = []  # store the results for all data.
for index, item in data_df.iterrows():
    # instruction =  item['instruction']      
    input = item['FINDINGS'] 
    procedure = item ['ProcedureNM']
    output_refer =  item['IMPRESSION_CLEAN']       
        
    print("\nid:",index,"_________________")
    # print("\ninput: ",input)
    # print("\noutput: ",output_refer)
    
    task = f"""PROCEDURE NAME: {item['ProcedureNM']}. {item['FINDINGS']}"""  
    
    # store the reponse for all agents.
    agent_contexts  = [{
    "role": "user",
    "content": task
    }]
    
    # get the original impression generated by a single agent (radiologist) without using a retriever or reviewer for comparison.
    messages = construct_radiologist_prompt(radiologist,agent_contexts,1) 
    response = radiologist.reply(messages)
    data_df.loc[index,'IMPRESSION_original']= response
    
    #generate initial impression with the help of retriever
    response = Retriever.reply(vectorstore,task,rag_k,filter={'modality': item['modality']})  # retrieve {rag_k} similar reports                
    agent_contexts.append({"role": Retriever.role, "content":response})
    data_df.loc[index,'rag10']= response
    # print(f"\n***{Retriever.role.upper()}: {response}\n")  
    
    
    ### interaction between the radiology and the reviewer
    round_list=[]
    for order,reviewer in enumerate(reviewer_list):
        print(f"\n###chant with {reviewer.role}###\n")
        
        agent_contexts,round = agent_chat(radiologist,reviewer,agent_contexts,chat_signal,max_round,order)  
        round_list.append(round)
    
    generated_description.append({"id": item['ID'], "input":task,"reference": output_refer,"round":round_list,"agent_response": agent_contexts[1:]})
    
    data_df.loc[index, ['IMPRESSION_rag', 'round']] = [agent_contexts[2]['content'], round]
    if round>1:
        data_df.loc[index,'IMPRESSION_agent']= agent_contexts[-2]['content']
        
        
    ### Periodically save the generated descriptions and the DataFrame to files every 10 iterations.
    # if index % 10 == 0:
    #     with open(output_file, "w") as f:
    #         json.dump(generated_description, f, indent=4)
        
    #     writer = pd.ExcelWriter(output_xlsx, engine='xlsxwriter')        
    #     data_df.to_excel(writer,sheet_name = 'impression',index=False)
    #     writer.close() 

with open(output_file, "w") as f:
    json.dump(generated_description, f, indent=4)
    
writer = pd.ExcelWriter(output_xlsx, engine='xlsxwriter')        
data_df.to_excel(writer,sheet_name = 'impression',index=False)
writer.close()  

print(f"\nInference result has been saved!\n")
    

################################################################
# The following code calculates metric scores for evaluation.
################################################################

# Identify the indices where the radiologist agent has updated the initial generated impression based on the reviewer's negative feedback.
index_agent = data_df.loc[data_df['round'] > 1].index

### unload the ollama model and release the gpu memory
import subprocess
command = [
    'curl',
    'http://localhost:11434/api/generate',
    '-d',
    '{"model": "llama3:70b", "keep_alive": 0}'
]
result = subprocess.run(command, capture_output=True, text=True)
torch.cuda.empty_cache()

### eveluation     
measure_type ='fmeasure'    
eval_file =f"{file_name}_eval_{measure_type}.xlsx"   # evaluation output file path

mean_df,all_df = evaluation_three_models(data_df,measure_type,'IMPRESSION_CLEAN','IMPRESSION_original','IMPRESSION_rag','IMPRESSION_agent')
print("mean score:",mean_df)

writer = pd.ExcelWriter(eval_file, engine='xlsxwriter')        
mean_df.to_excel(writer,sheet_name = 'mean')
all_df.to_excel(writer,sheet_name = 'all',index=False)
writer.close()  

print(f"\nEvaluation result has been saved!\n")

